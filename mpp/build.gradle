buildscript {


    ext.kotlin_version = '1.3.21'


    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()

    }
    dependencies {
        //   classpath "de.jensklingenberg:gradle-plugin:1.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.21"

    }

    allprojects {
        repositories {
            mavenCentral()
            mavenLocal()
            jcenter()
        }
    }
}
apply plugin: 'kotlin-multiplatform'
//apply plugin: "compiler.plugin.helloworld"


def compilerPlugin = project(':kotlin-compiler-plugin')
//def compilerPlugin = project(':test-compiler-plugin') //Test


kotlin {
    jvm() {
        configure([compilations.main]) {
            def pluginJar = new File(compilerPlugin.buildDir, "libs/${compilerPlugin.name}-0.0.1.jar").toString()
            // def pluginJar = new File(compilerPlugin.buildDir, "libs/${compilerPlugin.name}-0.0.1.jar").toString() //Test

            evaluationDependsOn(":$compilerPlugin.name")


            compileKotlinJvm.kotlinOptions {
                // freeCompilerArgs = ['-Xplugin=/home/jens/Code/2019/KotlinCompilerPluginHelloWorld/kotlin-compiler-plugin/build/libs/kotlin-compiler-plugin-0.0.1.jar']
                freeCompilerArgs = ["-Xplugin=$pluginJar"]


            }


            compileKotlinJvm.dependsOn += compilerPlugin.tasks["shadowJar"]


        }
    }
    js() {
        configure([compilations.main]) {
            def pluginJar = new File(compilerPlugin.buildDir, "libs/${compilerPlugin.name}-0.0.1.jar").toString()

            evaluationDependsOn(":$compilerPlugin.name")

            tasks.getByName(compileKotlinTaskName).kotlinOptions {
                // freeCompilerArgs = ['-Xplugin=/home/jens/Code/2019/KotlinCompilerPluginHelloWorld/kotlin-compiler-plugin/build/libs/kotlin-compiler-plugin-0.0.1.jar']
                freeCompilerArgs = ["-Xplugin=$pluginJar"]


            }

            tasks.getByName(compileKotlinTaskName).dependsOn += compilerPlugin.tasks["shadowJar"]
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    linuxX64("linux")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                // implementation project(':kotlin-compiler-plugin')

            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')

            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('stdlib-jdk8')

                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')

            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        linuxMain {


        }
        linuxTest {
        }
    }
}
